<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pd.mappers.IBoardMapper">
    <insert id="insertArticle"
            parameterType="com.example.pd.entities.board.ArticleEntity">
        INSERT INTO `pfad`.`articles` (`id`, `board_code`, `title`, `content`)
        VALUES (#{id}, #{boardCode}, #{title}, #{content})
    </insert>

    <insert id="insertComment"
            parameterType="com.example.pd.entities.board.CommentEntity">
        INSERT INTO `pfad`.`comments` (`user_id`, `article_index`, `content`)
        VALUES (#{userId}, #{articleIndex}, #{content})
    </insert>

    <insert id="insertImage"
            parameterType="com.example.pd.vos.board.ImageUploadVo">
        INSERT INTO `pfad`.`images` (`mime`, `file`)
        VALUES (#{fileMime}, #{fileBytes})
    </insert>

    <delete id="deleteArticle" parameterType="com.example.pd.entities.board.ArticleEntity">
        DELETE
        FROM `pfad`.`articles`
        WHERE `index` = #{index}
        LIMIT 1
    </delete>

    <delete id="deleteComment" parameterType="com.example.pd.entities.board.CommentEntity">
        DELETE
        FROM `pfad`.`comments`
        WHERE `article_index` = #{articleIndex}
#         AND `created_at` = ${createdAt}
        LIMIT 1

    </delete>

    <select id="selectArticle"
            parameterType="com.example.pd.interfaces.IArticle"
            resultType="com.example.pd.entities.board.ArticleEntity">
        SELECT `article`.`index`        AS `index`,
               `article`.`id`           AS `id`,
               `article`.`board_code`   AS `boardCode`,
               `article`.`created_at`   AS `createdAt`,
               `article`.`updated_at`   AS `updatedAt`,
               `article`.`title`        AS `title`,
               `article`.`content`      AS `content`,
               `article`.`view`         AS `view`,
               `article`.`deleted_flag` AS `isDeleted`,
               `board`.`name`           AS `name`
        FROM `pfad`.`articles` AS `article`
                 LEFT JOIN `pfad`.`boards` AS `board` ON `article`.`board_code` = `board`.`code`
        WHERE `index` = #{articleIndex}
        LIMIT 1
    </select>

    <select id="selectArticlesByList"
            parameterType="com.example.pd.vos.board.ListVo"
            resultType="com.example.pd.entities.board.ArticleEntity">
        SELECT `article`.`index`        AS `index`,
               `article`.`id`           AS `id`,
               `article`.`board_code`   AS `boardCode`,
               `article`.`created_at`   AS `createdAt`,
               `article`.`updated_at`   AS `updatedAt`,
               `article`.`title`        AS `title`,
               `article`.`view`         AS `view`,
               `article`.`deleted_flag` AS `isDeleted`,
               COUNT(`comment`.`index`) AS `commentCount`
        FROM `pfad`.`articles` AS `article`
                 LEFT JOIN `pfad`.`comments` AS `comment` ON `article`.`index` = `comment`.`article_index`
        WHERE `article`.`board_code` = #{code}
          AND `article`.`deleted_flag` = FALSE
        GROUP BY `article`.`index`
        ORDER BY `article`.`index` DESC
        LIMIT #{queryLimit} OFFSET #{queryOffset}
    </select>

    <select id="selectBoard"
            parameterType="com.example.pd.interfaces.IBoard"
            resultType="com.example.pd.entities.board.BoardEntity">
        SELECT `code`                   AS `code`,
               `name`                   AS `name`,
               `read_forbidden_flag`    AS `isReadForbidden`,
               `write_forbidden_flag`   AS `isWriteForbidden`,
               `comment_forbidden_flag` AS `isCommentForbidden`
        FROM `pfad`.`boards`
        WHERE `code` = #{boardCode}
        LIMIT 1

    </select>

    <select id="selectArticleCount"
            parameterType="com.example.pd.entities.board.BoardEntity"
            resultType="_int">
        SELECT COUNT(0)
        FROM `pfad`.`articles`
        WHERE `board_code` = #{code}
    </select>

    <select id="selectArticleCountForSearchByContent"
            parameterType="com.example.pd.vos.board.ListVo"
            resultType="_int">
        SELECT COUNT(0)
        FROM `pfad`.`articles`
        WHERE `board_code` = #{code}
          AND INSTR(REPLACE(`content`, ' ', ''), #{keywordWithoutSpaces})
    </select>

    <select id="selectArticleCountForSearchByTitle"
            parameterType="com.example.pd.vos.board.ListVo"
            resultType="_int">
        SELECT COUNT(0)
        FROM `pfad`.`articles`
        WHERE `board_code` = #{code}
          AND INSTR(REPLACE(`title`, ' ', ''), #{keywordWithoutSpaces})
    </select>

    <select id="selectArticleCountForSearchByWriter"
            parameterType="com.example.pd.vos.board.ListVo"
            resultType="_int">
        SELECT COUNT(0)
        FROM `pfad`.`articles`
        WHERE `board_code` = #{code}
          AND INSTR(REPLACE(`id`, ' ', ''), #{keywordWithoutSpaces})
    </select>

    <select id="selectArticleCountGreaterThan"
            parameterType="com.example.pd.entities.board.ArticleEntity"
            resultType="_int">
        SELECT COUNT(0)
        FROM `pfad`.`articles`
        WHERE `board_code` = #{boardCode}
          AND `index` >= #{index}
    </select>

    <select id="selectArticlesForSearchContent"
            parameterType="com.example.pd.vos.board.ListVo"
            resultType="com.example.pd.entities.board.ArticleEntity">
        SELECT `article`.`index`        AS `index`,
               `article`.`id`           AS `id`,
               `article`.`board_code`   AS `boardCode`,
               `article`.`created_at`   AS `createdAt`,
               `article`.`updated_at`   AS `updatedAt`,
               `article`.`title`        AS `title`,
               `article`.`view`         AS `view`,
               `article`.`deleted_flag` AS `isDeleted`,
               COUNT(`comment`.`index`) AS `commentCount`
        FROM `pfad`.`articles` AS `article`
                 LEFT JOIN `pfad`.`comments` AS `comment` ON `article`.`index` = `comment`.`article_index`
        WHERE `article`.`board_code` = #{code}
          AND `article`.`deleted_flag` = FALSE
          AND INSTR(REPLACE(`article`.`content`, ' ', ''), #{keywordWithoutSpaces})
        GROUP BY `article`.`index`
        ORDER BY `article`.`index` DESC
        LIMIT #{queryLimit} OFFSET #{queryOffset}
    </select>

    <select id="selectArticlesForSearchWriter"
            parameterType="com.example.pd.vos.board.ListVo"
            resultType="com.example.pd.entities.board.ArticleEntity">
        SELECT `article`.`index`        AS `index`,
               `article`.`id`           AS `id`,
               `article`.`board_code`   AS `boardCode`,
               `article`.`created_at`   AS `createdAt`,
               `article`.`updated_at`   AS `updatedAt`,
               `article`.`title`        AS `title`,
               `article`.`view`         AS `view`,
               `article`.`deleted_flag` AS `isDeleted`,
               COUNT(`comment`.`index`) AS `commentCount`
        FROM `pfad`.`articles` AS `article`
                 LEFT JOIN `pfad`.`comments` AS `comment` ON `article`.`index` = `comment`.`article_index`
        WHERE `article`.`board_code` = #{code}
          AND `article`.`deleted_flag` = FALSE
          AND INSTR(REPLACE(`article`.`id`, ' ', ''), #{keywordWithoutSpaces})
        GROUP BY `article`.`index`
        ORDER BY `article`.`index` DESC
        LIMIT #{queryLimit} OFFSET #{queryOffset}
    </select>

    <select id="selectArticlesForSearchTitle"
            parameterType="com.example.pd.vos.board.ListVo"
            resultType="com.example.pd.entities.board.ArticleEntity">
        SELECT `article`.`index`        AS `index`,
               `article`.`id`           AS `id`,
               `article`.`board_code`   AS `boardCode`,
               `article`.`created_at`   AS `createdAt`,
               `article`.`updated_at`   AS `updatedAt`,
               `article`.`title`        AS `title`,
               `article`.`view`         AS `view`,
               `article`.`deleted_flag` AS `isDeleted`,
               COUNT(`comment`.`index`) AS `commentCount`
        FROM `pfad`.`articles` AS `article`
                 LEFT JOIN `pfad`.`comments` AS `comment` ON `article`.`index` = `comment`.`article_index`
        WHERE `article`.`board_code` = #{code}
          AND `article`.`deleted_flag` = FALSE
          AND INSTR(REPLACE(`article`.`title`, ' ', ''), #{keywordWithoutSpaces})
        GROUP BY `article`.`index`
        ORDER BY `article`.`index` DESC
        LIMIT #{queryLimit} OFFSET #{queryOffset}
    </select>

    <select id="selectComments"
            parameterType="com.example.pd.interfaces.IArticle"
            resultType="com.example.pd.entities.board.CommentEntity">
        SELECT `index`         AS `index`,
               `user_id`       AS `userId`,
               `article_index` AS `articleIndex`,
               `created_at`    AS `createdAt`,
               `content`       AS `content`,
               `deleted_flag`  AS `isDeleted`
        FROM `pfad`.`comments`
        WHERE `article_index` = #{articleIndex}
#         AND `deleted_flag` = FALSE
        ORDER BY `created_at`
    </select>

    <select id="selectImage" parameterType="com.example.pd.entities.board.ImageEntity"
            resultType="com.example.pd.entities.board.ImageEntity">
        SELECT `index`      AS `index`,
               `created_at` AS `createdAt`,
               `mime`       AS `mime`,
               `file`       AS `file`
        FROM `pfad`.`images`
        WHERE `index` = #{index}
        LIMIT 1
    </select>

    <select id="selectLastInsertId"
            resultType="_int">
        SELECT LAST_INSERT_ID()
    </select>

    <update id="updateArticleView"
            parameterType="com.example.pd.entities.board.ArticleEntity">
        UPDATE `pfad`.`articles`
        SET view = view + 1
        WHERE `index` = #{index}
        LIMIT 1
    </update>

    <update id="updateArticleDeleted"
            parameterType="com.example.pd.entities.board.ArticleEntity">
        UPDATE `pfad`.`articles`
        SET `deleted_flag` = TRUE
        WHERE `index` = #{index}
        LIMIT 1
    </update>

    <update id="updateArticle"
            parameterType="com.example.pd.entities.board.ArticleEntity">
        UPDATE `pfad`.`articles`
        SET `title`      = #{title},
            `content`    = #{content},
            `updated_at` = NOW()
        WHERE `index` = #{index}
          AND `board_code` = #{boardCode}
        LIMIT 1
    </update>
</mapper>